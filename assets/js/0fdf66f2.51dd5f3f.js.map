{"version":3,"file":"assets/js/0fdf66f2.51dd5f3f.js","mappings":"+OAEO,MAAMA,EAAc,CAC1BC,GAAI,eACJC,MAAO,eACPC,iBAAkB,GAENC,OAAeC,EACfC,EAAW,CACtB,GAAM,mCACN,MAAS,eACT,YAAe,+DACf,OAAU,kDACV,cAAiB,sBACjB,KAAQ,oCACR,UAAa,yCACb,OAAS,EACT,UAAY,EACZ,KAAQ,GACR,QAAW,UACX,gBAAmB,EACnB,YAAe,CACb,GAAM,eACN,MAAS,eACT,iBAAoB,GAEtB,QAAW,kBACX,KAAQ,CACN,MAAS,QACT,UAAa,oCAGJC,EAAS,CAEtB,EAIaC,EAAM,GACnB,SAASC,EAAkBC,GACzB,MAAMC,EAAc,CAClBC,KAAM,OACNC,EAAG,IACHC,IAAK,UACF,YACAJ,EAAMK,aACR,kBAACC,GAAqBL,EAEzB,OADKK,GAuDP,SAA8Bf,EAAIgB,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOhB,EAAK,qEACnF,CAzD0BkB,CAAqB,qBAAqB,IAC3D,UAAM,WAAW,CACtBC,SAAU,EAAC,SAAKT,EAAYE,EAAG,CAC7BO,SAAU,iEACR,MAAM,UAAMJ,EAAmB,CACjCK,UAAW,aACXD,SAAU,EAAC,UAAMT,EAAYE,EAAG,CAC9BO,SAAU,CAAC,yBAAyB,SAAKT,EAAYC,KAAM,CACzDQ,SAAU,kBACR,gBACF,SAAKT,EAAYG,IAAK,CACxBM,UAAU,SAAKT,EAAYC,KAAM,CAC/BU,UAAW,cACXF,SAAU,qCAGZ,MAAM,UAAMJ,EAAmB,CACjCK,UAAW,QACXD,SAAU,EAAC,UAAMT,EAAYE,EAAG,CAC9BO,SAAU,CAAC,yBAAyB,SAAKT,EAAYC,KAAM,CACzDQ,SAAU,aACR,gBACF,SAAKT,EAAYG,IAAK,CACxBM,UAAU,SAAKT,EAAYC,KAAM,CAC/BU,UAAW,cACXF,SAAU,sCAGZ,MAAM,UAAMJ,EAAmB,CACjCK,UAAW,MACXD,SAAU,EAAC,UAAMT,EAAYE,EAAG,CAC9BO,SAAU,CAAC,yBAAyB,SAAKT,EAAYC,KAAM,CACzDQ,SAAU,iBACR,gBACF,SAAKT,EAAYG,IAAK,CACxBM,UAAU,SAAKT,EAAYC,KAAM,CAC/BU,UAAW,cACXF,SAAU,sCAKpB,CACe,SAASG,EAAWb,EAAQ,CAAC,GAC1C,MAAOc,QAASC,GAAa,KACxB,YACAf,EAAMK,YAEX,OAAOU,GAAY,SAAKA,EAAW,IAC9Bf,EACHU,UAAU,SAAKX,EAAmB,IAC7BC,MAEFD,EAAkBC,EACzB,C,wDC1EA,MAAMgB,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBb,GAC/B,MAAMc,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfZ,EACFA,EAAWc,GAGb,IAAIA,KAAsBd,EACnC,GACA,CAACc,EAAmBd,GAExB,CAWO,SAASe,EAAYpB,GAE1B,IAAIqB,EAWJ,OAREA,EADErB,EAAMsB,qBAEsB,mBAArBtB,EAAMK,WACTL,EAAMK,WAAWW,GACjBhB,EAAMK,YAAcW,EAEVE,EAAiBlB,EAAMK,YAGlC,gBACLY,EAAWM,SACX,CAACC,MAAOH,GACRrB,EAAMU,SAEV,C","sources":["webpack://dockview-docs/./docs/overview/getStarted/installation.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {\n\tid: 'installation',\n\ttitle: 'Installation',\n\tsidebar_position: 0\n};\nexport const contentTitle = undefined;\nexport const metadata = {\n  \"id\": \"overview/getStarted/installation\",\n  \"title\": \"Installation\",\n  \"description\": \"Learn how to install Dockview for a selection of frameworks.\",\n  \"source\": \"@site/docs/overview/getStarted/installation.mdx\",\n  \"sourceDirName\": \"overview/getStarted\",\n  \"slug\": \"/overview/getStarted/installation\",\n  \"permalink\": \"/docs/overview/getStarted/installation\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"tags\": [],\n  \"version\": \"current\",\n  \"sidebarPosition\": 0,\n  \"frontMatter\": {\n    \"id\": \"installation\",\n    \"title\": \"Installation\",\n    \"sidebar_position\": 0\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"next\": {\n    \"title\": \"Theme\",\n    \"permalink\": \"/docs/overview/getStarted/theme\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  }, {FrameworkSpecific} = _components;\n  if (!FrameworkSpecific) _missingMdxReference(\"FrameworkSpecific\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Learn how to install Dockview for a selection of frameworks.\"\n    }), \"\\n\", _jsxs(FrameworkSpecific, {\n      framework: \"JavaScript\",\n      children: [_jsxs(_components.p, {\n        children: [\"Firstly, install the \", _jsx(_components.code, {\n          children: \"dockview-core\"\n        }), \" library:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm install dockview-core\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(FrameworkSpecific, {\n      framework: \"React\",\n      children: [_jsxs(_components.p, {\n        children: [\"Firstly, install the \", _jsx(_components.code, {\n          children: \"dockview\"\n        }), \" library:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm install dockview-react\\n\"\n        })\n      })]\n    }), \"\\n\", _jsxs(FrameworkSpecific, {\n      framework: \"Vue\",\n      children: [_jsxs(_components.p, {\n        children: [\"Firstly, install the \", _jsx(_components.code, {\n          children: \"dockview-vue\"\n        }), \" library:\"]\n      }), _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm install dockview-vue\\n\"\n        })\n      })]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} props\n *   Props.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(props) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (props.disableParentContext) {\n    allComponents =\n      typeof props.components === 'function'\n        ? props.components(emptyComponents)\n        : props.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(props.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    props.children\n  )\n}\n"],"names":["frontMatter","id","title","sidebar_position","contentTitle","undefined","metadata","assets","toc","_createMdxContent","props","_components","code","p","pre","components","FrameworkSpecific","component","Error","_missingMdxReference","children","framework","className","MDXContent","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents","MDXProvider","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}