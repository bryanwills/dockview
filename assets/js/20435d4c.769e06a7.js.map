{"version":3,"file":"assets/js/20435d4c.769e06a7.js","mappings":"+OAEO,MAAMA,EAAc,CAC1BC,MAAO,aAEKC,OAAeC,EACfC,EAAW,CACtB,GAAM,kBACN,MAAS,YACT,YAAe,8EACf,OAAU,iCACV,cAAiB,OACjB,KAAQ,mBACR,UAAa,wBACb,OAAS,EACT,UAAY,EACZ,KAAQ,GACR,QAAW,UACX,YAAe,CACb,MAAS,aAEX,QAAW,kBACX,SAAY,CACV,MAAS,SACT,UAAa,qBAEf,KAAQ,CACN,MAAS,YACT,UAAa,yBAGJC,EAAS,CAEtB,EAIaC,EAAM,CAAC,CAClB,MAAS,gBACT,GAAM,gBACN,MAAS,IAEX,SAASC,EAAkBC,GACzB,MAAMC,EAAc,CAClBC,KAAM,OACNC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,OAAQ,SACRC,GAAI,SACD,YACAP,EAAMQ,aACR,WAACC,GAAcR,EAElB,OADKQ,GAsDP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAxDmBG,CAAqB,cAAc,IAC7C,UAAM,WAAW,CACtBC,SAAU,EAAC,SAAKb,EAAYI,EAAG,CAC7BS,SAAU,gFACR,MAAM,UAAMb,EAAYI,EAAG,CAC7BS,SAAU,CAAC,0IAA0I,SAAKb,EAAYC,KAAM,CAC1KY,SAAU,SACR,0DAA0D,SAAKb,EAAYC,KAAM,CACnFY,SAAU,aACR,qCACF,MAAM,SAAKb,EAAYE,GAAI,CAC7BO,GAAI,gBACJI,SAAU,kBACR,MAAM,SAAKb,EAAYI,EAAG,CAC5BS,SAAU,gDACR,MAAM,UAAMb,EAAYM,GAAI,CAC9BO,SAAU,CAAC,MAAM,UAAMb,EAAYG,GAAI,CACrCU,SAAU,EAAC,SAAKb,EAAYK,OAAQ,CAClCQ,SAAU,YACR,MAAM,SAAKb,EAAYC,KAAM,CAC/BY,SAAU,iBACR,yDACF,MAAM,UAAMb,EAAYG,GAAI,CAC9BU,SAAU,EAAC,SAAKb,EAAYK,OAAQ,CAClCQ,SAAU,YACR,MAAM,SAAKb,EAAYC,KAAM,CAC/BY,SAAU,mBACR,oEACF,MAAM,UAAMb,EAAYG,GAAI,CAC9BU,SAAU,EAAC,SAAKb,EAAYK,OAAQ,CAClCQ,SAAU,YACR,MAAM,SAAKb,EAAYC,KAAM,CAC/BY,SAAU,iBACR,gCAAgC,SAAKb,EAAYC,KAAM,CACzDY,SAAU,mBACR,oCACF,QACF,MAAM,SAAKL,EAAY,CACzBC,GAAI,0BAGV,CACe,SAASK,EAAWf,EAAQ,CAAC,GAC1C,MAAOgB,QAASC,GAAa,KACxB,YACAjB,EAAMQ,YAEX,OAAOS,GAAY,SAAKA,EAAW,IAC9BjB,EACHc,UAAU,SAAKf,EAAmB,IAC7BC,MAEFD,EAAkBC,EACzB,C,wDC/EA,MAAMkB,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBZ,GAC/B,MAAMa,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfX,EACFA,EAAWa,GAGb,IAAIA,KAAsBb,EACnC,GACA,CAACa,EAAmBb,GAExB,CAWO,SAASc,EAAYtB,GAE1B,IAAIuB,EAWJ,OAREA,EADEvB,EAAMwB,qBAEsB,mBAArBxB,EAAMQ,WACTR,EAAMQ,WAAWU,GACjBlB,EAAMQ,YAAcU,EAEVE,EAAiBpB,EAAMQ,YAGlC,gBACLW,EAAWM,SACX,CAACC,MAAOH,GACRvB,EAAMc,SAEV,C","sources":["webpack://dockview-docs/./docs/core/scrollbars.mdx","webpack://dockview-docs/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {\n\ttitle: 'Scrolling'\n};\nexport const contentTitle = undefined;\nexport const metadata = {\n  \"id\": \"core/scrollbars\",\n  \"title\": \"Scrolling\",\n  \"description\": \"It's important to understand how to configure the scrollbar within a panel.\",\n  \"source\": \"@site/docs/core/scrollbars.mdx\",\n  \"sourceDirName\": \"core\",\n  \"slug\": \"/core/scrollbars\",\n  \"permalink\": \"/docs/core/scrollbars\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"title\": \"Scrolling\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Locked\",\n    \"permalink\": \"/docs/core/locked\"\n  },\n  \"next\": {\n    \"title\": \"Watermark\",\n    \"permalink\": \"/docs/core/watermark\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [{\n  \"value\": \"Live Examples\",\n  \"id\": \"live-examples\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {CodeRunner} = _components;\n  if (!CodeRunner) _missingMdxReference(\"CodeRunner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"It's important to understand how to configure the scrollbar within a panel.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A panel will appear with a scrollbar if the the contents of your view has a fixed height.\\nIf you are using a relative height such as \", _jsx(_components.code, {\n        children: \"100%\"\n      }), \" you will need a child container\\nwith the appropiate \", _jsx(_components.code, {\n        children: \"overflow\"\n      }), \" value to allow for scrollbars.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"live-examples\",\n      children: \"Live Examples\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following example contains three views:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Panel 1\"\n        }), \" (\", _jsx(_components.code, {\n          children: \"height: 100%\"\n        }), \"): No scrollbar appears and the content is clipped.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Panel 2\"\n        }), \" (\", _jsx(_components.code, {\n          children: \"height: 2000px\"\n        }), \"): A scrollbar does appear since a fixed height has been used.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Panel 3\"\n        }), \": \", _jsx(_components.code, {\n          children: \"height: 100%\"\n        }), \" and a child component with \", _jsx(_components.code, {\n          children: \"overflow: auto\"\n        }), \" which will enable scrollbars.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(CodeRunner, {\n      id: \"dockview/scrollbars\"\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} props\n *   Props.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(props) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (props.disableParentContext) {\n    allComponents =\n      typeof props.components === 'function'\n        ? props.components(emptyComponents)\n        : props.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(props.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    props.children\n  )\n}\n"],"names":["frontMatter","title","contentTitle","undefined","metadata","assets","toc","_createMdxContent","props","_components","code","h2","li","p","strong","ul","components","CodeRunner","id","component","Error","_missingMdxReference","children","MDXContent","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents","MDXProvider","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}